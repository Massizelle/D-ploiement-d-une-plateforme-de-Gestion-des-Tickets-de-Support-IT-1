pipeline {
    agent any

    environment {
        // Définir les variables d'environnement ici si nécessaire
        DOCKER_IMAGE_BACKEND = 'gestion-tickets-backend'
        DOCKER_IMAGE_FRONTEND = 'gestion-tickets-frontend'
        DOCKER_IMAGE_DB = 'gestion-tickets-db'
        DOCKER_REGISTRY = 'docker.io' // Exemple de registry Docker, modifiez-le si nécessaire
    }

    stages {
        stage('Checkout') {
            steps {
                // Récupérer le code source depuis le repository Git
                checkout scm
            }
        }

        stage('Build Docker Images') {
            steps {
                script {
                    // Construire les images Docker pour le backend, frontend et db
                    echo 'Building Docker images...'

                    sh 'docker-compose -f docker-compose.yml build'
                }
            }
        }

        stage('Run Tests') {
            steps {
                script {
                    // Vous pouvez ajouter des tests ici pour chaque service
                    echo 'Running tests...'

                    // Lancer les tests du backend et frontend via Docker
                    sh 'docker-compose -f docker-compose.yml run backend npm test'
                    sh 'docker-compose -f docker-compose.yml run frontend npm test'
                }
            }
        }

        stage('Push Docker Images to Registry') {
            steps {
                script {
                    // Se connecter au registre Docker si nécessaire (si authentification est requise)
                    echo 'Pushing Docker images to registry...'

                    sh 'docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD $DOCKER_REGISTRY'

                    // Pousser les images sur le registre Docker
                    sh "docker tag ${DOCKER_IMAGE_BACKEND}:latest ${DOCKER_REGISTRY}/${DOCKER_IMAGE_BACKEND}:latest"
                    sh "docker push ${DOCKER_REGISTRY}/${DOCKER_IMAGE_BACKEND}:latest"

                    sh "docker tag ${DOCKER_IMAGE_FRONTEND}:latest ${DOCKER_REGISTRY}/${DOCKER_IMAGE_FRONTEND}:latest"
                    sh "docker push ${DOCKER_REGISTRY}/${DOCKER_IMAGE_FRONTEND}:latest"

                    sh "docker tag ${DOCKER_IMAGE_DB}:latest ${DOCKER_REGISTRY}/${DOCKER_IMAGE_DB}:latest"
                    sh "docker push ${DOCKER_REGISTRY}/${DOCKER_IMAGE_DB}:latest"
                }
            }
        }

        stage('Deploy to Staging') {
            steps {
                script {
                    // Déployer l'application sur l'environnement de staging
                    echo 'Deploying to staging...'

                    // Utiliser docker-compose pour lancer les services dans un environnement staging
                    sh 'docker-compose -f docker-compose.yml -p gestion-tickets-staging up -d'
                }
            }
        }

        stage('Clean up') {
            steps {
                script {
                    // Nettoyer les ressources non utilisées, telles que les conteneurs et les images
                    echo 'Cleaning up...'
                    sh 'docker system prune -f'
                }
            }
        }
    }

    post {
        success {
            echo 'Pipeline finished successfully!'
        }
        failure {
            echo 'Pipeline failed!'
        }
        always {
            // Actions à exécuter, peu importe le succès ou l’échec
            echo 'Cleaning up resources after pipeline execution.'
        }
    }
}